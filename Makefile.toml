[config]
default_to_workspace = false

[env]
HOST = "0.0.0.0"
PORT = 8080
DATABASE_USERNAME = "admin"
DATABASE_PASSWORD = "Jegrap-givsuf-5muzti"
DATABASE_NAME = "app"
DATABASE_HOST_RDS = "sample-db.c5uqgeiqcz3r.ap-northeast-1.rds.amazonaws.com"
DATABASE_PORT_OUTER = 3306
DATABASE_PORT_INNER = 5432
REDIS_PORT_OUTER = 6379
REDIS_PORT_INNER = 6379
AUTH_TOKEN_TTL = 86400

# Docker Composeのネットワーク内でのDB等への接続情報
[tasks.set-env-docker.env]
DATABASE_HOST = "postgres"
DATABASE_PORT = "${DATABASE_PORT_INNER}"
DATABASE_URL = "postgresql://${DATABASE_HOST}:${DATABASE_PORT}/${DATABASE_NAME}?user=${DATABASE_USERNAME}&password=${DATABASE_PASSWORD}"
REDIS_HOST = "redis"
REDIS_PORT = "${REDIS_PORT_INNER}"

# ★★★ 新規追加：AWS RDSに接続するための設定 ★★★
[tasks.set-env-aws.env]
DATABASE_HOST = "${DATABASE_HOST_RDS}" # RDSエンドポイントを使用
DATABASE_PORT = "${DATABASE_PORT_OUTER}" # 外部ポートを使用
# データベースがMySQLの場合は "mysql://"、PostgreSQLの場合は "postgresql://" を維持
DATABASE_URL = "mysql://${DATABASE_HOST}:${DATABASE_PORT}/${DATABASE_NAME}?user=${DATABASE_USERNAME}&password=${DATABASE_PASSWORD}"
REDIS_HOST = "localhost" # RedisはEC2上のDocker Composeコンテナを参照
REDIS_PORT = "${REDIS_PORT_OUTER}"

# Docker Compose外からDB等にアクセスする際の接続情報
[tasks.set-env-local.env]
DATABASE_HOST = "${DATABASE_HOST_RDS}" # ★★★ 修正: localhost -> RDSホスト ★★★
DATABASE_PORT = "${DATABASE_PORT_OUTER}" # ★★★ 修正: 3306を使う ★★★
# ★★★ 修正: プロトコルもmysqlに合わせる ★★★
DATABASE_URL = "mysql://${DATABASE_HOST}:${DATABASE_PORT}/${DATABASE_NAME}?user=${DATABASE_USERNAME}&password=${DATABASE_PASSWORD}" 
REDIS_HOST = "localhost"
REDIS_PORT = "${REDIS_PORT_OUTER}"

[tasks.before-build]
run_task = [
  { name = [
    "compose-up-redis",
  ] },
]

[tasks.compose-build-app]
extend = "set-env-aws"
command = "docker-compose"
args = [
  "build",
  "app",
  "--build-arg",
  "BUILDKIT_INLINE_CACHE=1",
  "${@}",
]

[tasks.run]
extend = "set-env-local"
dependencies = ["before-build"]
command = "cargo"
args = ["run", "${@}"]

[tasks.run-in-docker]
extend = "set-env-aws" # ★★★ set-env-docker から変更 ★★★
# DB関連の依存関係を削除
dependencies = ["compose-build-app", "compose-up-redis"] 
command = "docker-compose"
args = ["up", "-d", "app", "redis"] # ★★★ redisも起動するように明記 ★★★

[tasks.logs]
extend = "set-env-docker"
dependencies = ["before-build"]
command = "docker-compose"
args = ["logs", "${@}"]

[tasks.build]
extend = "set-env-local"
dependencies = ["before-build"]
command = "cargo"
args = ["build", "${@}"]

[tasks.check]
extend = "set-env-local"
dependencies = ["before-build"]
command = "cargo"
args = ["check"]


### Development

[tasks.watch]
extend = "set-env-local"
dependencies = ["before-build"]
run_task = [{ name = ["fmt", "clippy", "test"] }]
watch = true

[tasks.fmt]
extend = "set-env-local"
command = "cargo"
args = ["fmt", "--all", "${@}"]

[tasks.clippy]
extend = "set-env-local"
command = "cargo"
args = ["clippy", "--all", "--all-targets", "${@}"]

[tasks.test]
extend = "set-env-local"
install_crate = { crate_name = "cargo-nextest", binary = "cargo", test_arg = [
  "nextest",
  "--help",
] }
command = "cargo"
args = [
  "nextest",
  "run",
  "--workspace",
  "--status-level",
  "all",
  "--test-threads=1",
]

[tasks.clippy-ci]
extend = "set-env-local"
dependencies = ["before-build"]
command = "cargo"
args = ["clippy", "--", "--no-deps", "-Dwarnings"]

[tasks.test-ci]
dependencies = ["before-build"]
run_task = "test"


### Migration

[tasks.migrate]
extend = "set-env-local"
install_crate = { crate_name = "sqlx-cli", binary = "sqlx", test_arg = "--help", version = "0.7.3" }
script = '''
#!/bin/bash
until sqlx migrate run --source adapter/migrations; do
    sleep 1
done
'''

[tasks.sqlx]
extend = "set-env-local"
install_crate = { crate_name = "sqlx-cli", binary = "sqlx", test_arg = "--help", version = "0.7.3" }
command = "sqlx"
args = ["${@}", "--source", "adapter/migrations"]

[tasks.psql]
extend = "set-env-local"
command = "docker"
args = [
  "run",
  "-it",
  "--rm",
  "--network",
  "host",
  "-v",
  "${PWD}:/work",
  "postgres:15",
  "psql",
  "${DATABASE_URL}",
  "${@}",
]

[tasks.initial-setup]
extend = "set-env-local"
command = "docker"
args = [
  "run",
  "-it",
  "--rm",
  "--network",
  "host",
  "-v",
  "${PWD}:/work",
  "postgres:15",
  "psql",
  "${DATABASE_URL}",
  "-f",
  "/work/data/initial_setup.sql",
]


### Docker Compose

[tasks.compose]
extend = "set-env-docker"
command = "docker-compose"
args = ["${@}"]

[tasks.compose-up-redis]
extend = "set-env-docker"
command = "docker-compose"
args = ["up", "-d", "redis"]

[tasks.compose-down]
extend = "set-env-docker"
command = "docker-compose"
args = ["down"]

[tasks.compose-remove]
extend = "set-env-docker"
command = "docker-compose"
args = ["down", "-v"]


[tasks.create-hash]
script_runner = "@rust"
script = '''
//! ```cargo
//! [dependencies]
//! bcrypt = "0.15.1"
//! ```
fn main() {
    let password = &std::env::args().collect::<Vec<String>>()[1];
    let hashed = bcrypt::hash(password, bcrypt::DEFAULT_COST).unwrap();
    println!("{}", hashed);
}
'''

